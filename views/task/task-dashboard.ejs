<link rel="stylesheet" href="/css/taskCss/task-dashboard.css" />
<div class="contentWrapper">
  <%- include('../task/task_component/task-navbar.ejs') %>
    
  <div class="content">
    <div class="welcomeText">
      <div class="toptext">
        <h1>สวัสดีตอนบ่าย, <%= user.username %></h1>
        <p>☀️ คุณสามารถดูสรุปสถานะงาน ลำดับความสำคัญ ปริมาณงาน และอื่นๆ ได้ที่นี่</p>
      </div>

      <div class="filterData">
        <div class="datePicker">
          <i class='bx bx-filter filterIcon'></i>
          <select name="filterSelect" id="filter">
            <option value="" disabled selected><%= selectedPeriod %></option>
            <option value="today">วันนี้</option>
            <option value="7day">7 วันที่ผ่านมา</option>
            <option value="1month">1 เดือนที่ผ่านมา</option>
            <option value="sinceCreate">ทั้งหมด</option>
          </select>
        </div>
      </div>
    </div>
    <div class="countSection">
      <div class="countCard" id="dueNextSevenDaysCard" data-space-id="<%= spaceId %>">
        <div class="icon" style="background-color: #F9D7D3;">
          <i class="fa-solid fa-calendar-days" style="color: #A1392C;"></i>
        </div>
        <div class="countText">
          <p class="count">
            <span class="countNumber" style="color: #A1392C;">
              <%= dueNextSevenDaysCount %>
            </span>
           <span style="color: #A1392C; font-size: 16px;">
            งาน
           </span>
          </p>
          <p class="Text">กำหนดส่ง <br> ภายในอีก 7 วัน</p>
        </div>
      </div>

      <div class="countCard" id="finishedTasksCard" data-space-id="<%= spaceId %>">
        <div class="icon" style="background-color: #73D26C;">
          <i class="fa-solid fa-check"></i>
        </div>
        <div class="countText">
          <p class="count">
            <span class="countNumber" style="color: #3E7156;">
              <%= finishedTasksCount %>
            </span>
           <span style="color: #3E7156; font-size: 16px;">
            งาน
           </span>
          </p>
          <p class="Text">ที่เสร็จสิ้น <br> <%= periodText %></p>
        </div>
      </div>

      <div class="countCard" id="recentTasksCard" data-space-id="<%= spaceId %>">
        <div class="icon" style="background-color: #DED8FA;">
          <i class="fa-solid fa-plus" style="color: #5B4EAC;"></i>
        </div>
        <div class="countText">
          <p class="count">
            <span class="countNumber" style="color: #5B4EAC;">
              <%= recentTasksCount %>
            </span>
           <span style="color: #5B4EAC; font-size: 16px;">
            งาน
           </span>
          </p>
          <p class="Text">ที่สร้าง <br> <%= periodText %></p>
        </div>
      </div>
    
      <div class="countCard" id="subTasksCard">
          <div class="icon" style="background-color: #D0DFFC;">
              <i class="fa-solid fa-list" style="color: #1F55C5;"></i>
          </div>
          <div class="countText">
              <p class="count">
                  <span class="countNumber" style="color: #1F55C5;">
                      <%= subTasksCount %>
                  </span>
                  <span style="color: #1F55C5; font-size: 16px;">
                      งานย่อย
                  </span>
              </p>
              <p class="Text">ที่ถูกสร้าง <br> <%= periodText %></p>
          </div>
      </div>    
    </div>

    <div class="chartWrap">
      <div class="chart" id="statusChartContainer">
        <h1 id="chartTitle">ภาพรวมสถานะของงาน</h1>
        <div class="chartContent statusChart">
          <canvas id="statusChart"></canvas>
          <div class="hoverText">
            <p id="statusPer">
              <%= finishedPercentage %>%
            </p>
            <p id="statusLabel">Finished</p>
          </div>
        </div>
      </div>
    
      <div class="chart" id="priorityChartContainer">
        <h1 id="chartTitle">ลำดับความสำคัญของงาน</h1>
        <div class="chartContent priorityChart">
          <canvas id="priorityChart" width="400" height="400"></canvas>
        </div>
      </div>
    
      <div class="chart workload-chart" id="workloadChartContainer">
        <h1 id="chartTitle" style="padding-left: 8px;">ปริมาณงานของสมาชิก</h1>
        <table class="workload-table">
          <thead>
            <tr>
              <th id="userAvatarLabel">ผู้รับผิดชอบ</th>
              <th>การกระจายงาน</th>
              <th id="taskCountLabel">จำนวนงาน</th>
            </tr>
          </thead>
          <tbody>
            <% if (workloadChartData.length === 0) { %>
              <% users.forEach(user => { %> <!-- Loop through all users to display default rows -->
                <tr class="workload-row" data-user-id="<%= user._id %>" data-space-id="<%= spaces._id %>">
                  <td id="userAvatar">
                    <img src="<%= user.profileImage %>" class="user-avatar">
                    <span class="user-name"><%= user.username %></span>
                  </td>
                  <td id="progressBar">
                    <div class="perWrap">
                      <div class="progress-bar-container">
                        <div class="progress-bar" style="width: 0%; background-color: #6cc;"></div>
                      </div>
                      <span class="percentage">0%</span>
                    </div>
                  </td>
                  <td id="taskCount">0</td>
                </tr>
              <% }); %>
            <% } else { %>
              <% workloadChartData.forEach(item => { %>
                <tr class="workload-row" data-user-id="<%= item.user._id %>" data-space-id="<%= spaces._id %>">
                  <td id="userAvatar">
                    <img src="<%= item.user.profileImage %>" class="user-avatar">
                    <span class="user-name"><%= item.user.username %></span>
                  </td>
                  <td id="progressBar">
                    <div class="perWrap">
                      <div class="progress-bar-container">
                        <div class="progress-bar"
                          style="width: <%= item.percentage %>%; background-color: <%= item.percentage > 40 ? '#f66' : '#6cc' %>;">
                        </div>
                      </div>
                      <span class="percentage"><%= item.percentage %>%</span>
                    </div>
                  </td>
                  <td id="taskCount"><%= item.taskCount %></td>
                </tr>
              <% }); %>
            <% } %>
          </tbody>
        </table>
      </div>
    </div>
  </div>

</div>



<div class="tasksModal modal" id="tasksModal" >
  <div class="modal-content">
      <div class="topModal">
          <div class="nameSearch">
              <h2 id="modalTitle"></h2>
              <div class="searchContainer">
                <i class='bx bx-search searchIcon'></i>
                <input type="search" placeholder="ค้นหางาน..." id="searchInput">
              </div>
          </div>
          <span class="close">&times;</span>
      </div>
    <table id="tasksTable">
      <thead>
        <tr>
          <th>ชื่องาน</th>
          <th>
              <div class="tableHead">
                <i class='bx bxs-detail'></i>
                รายละเอียด
              </div>
          </th>
          <th>
              <div class="tableHead">
                <i class="fa-solid fa-circle-arrow-right"></i> 
                สถานะ
              </div>
          </th>
          <th>
              <div class="tableHead">
                <i class="fa-solid fa-flag"></i> 
                ความสำคัญ
              </div>
          </th>
          <th>
            <div class="tableHead">
              <i class="fa-solid fa-calendar-days"></i>
              วันที่สร้าง
              <i class="fa-solid fa-arrow-down" id="createdAtSortIcon" style="cursor: pointer;"
                title="Sorted newest -> oldest"></i>
            </div>
          </th>
          <th>
            <div class="tableHead">
                <i class="fa-solid fa-calendar-check"></i> 
                วันครบกำหนด
                <i class="fa-solid fa-arrow-down" id="dueDateSortIcon" style="cursor: pointer;" title="เรียงลำดับใหม่สุด -> เก่าสุด"></i>
            </div>
          </th>
          <th>
              <div class="tableHead">
                <i class="fa-solid fa-user-tag"></i> ผู้รับผิดชอบ
              </div>
          </th>
        </tr>
      </thead>
      <div style="max-height: 400px; overflow-y: auto;">
          <tbody>
          </tbody>
      </div>
    </table>

    <div class="formFooter">
      <div class="showAfterForm">
          <p>+ เพิ่มงานที่คุณต้องจัดการ</p>
        </div>
        <form action="" class="addForm">
          <input type="text" placeholder="ใส่ชื่องาน" id="addFormInput">
          <button type="submit" id="enterBtn">
            + สร้าง
            <div class="formIcon">
              <i class="fa-solid fa-turn-down"></i>
            </div>
          </button>
        </form>
    </div>
  </div>
</div>

<div id="subTasksModal" class="modal">
  <div class="modal-content">
    <span class="close">&times;</span>
    <h2 id="modalTitle"></h2>
    <table id="subtasksTable">
      <thead>
        <tr>
          <th>ชื่องานย่อย</th>
          <th>งานหลัก</th>
          <th>สถานะ</th>
          <th>วันครบกำหนด</th>
          <th>ผู้รับผิดชอบ</th>
        </tr>
      </thead>
      <tbody>
        <!-- Tasks will be dynamically inserted here -->
      </tbody>
    </table>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
<script>
  // Filter section
  document.getElementById('filter').addEventListener('change', function() {
    const selectedPeriod = this.value;
    const spaceId = '<%= spaces._id %>'; 
    window.location.href = `/space/item/${spaceId}/dashboard?period=${selectedPeriod}`;
  });
  
  //search Input section
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById("searchInput");
    const searchIcon = document.querySelector(".searchIcon");

    searchInput.addEventListener("focus", () => {
        searchIcon.style.color = "var(--btn)"; // Change to your desired color
    });

    searchInput.addEventListener("blur", () => {
        searchIcon.style.color = "gray"; // Revert to the default color
    });
  });

  // form dispaly section
  document.addEventListener('DOMContentLoaded', () => {
    const showAfterForm = document.querySelector(".showAfterForm");
    const addForm = document.querySelector(".addForm");
    const formFooter = document.querySelector(".formFooter");

    showAfterForm.addEventListener("click", () => {
      showAfterForm.style.display = "none"; 
      addForm.style.display = "flex"; 
      formFooter.classList.add("formFooter-active");
    });

    document.addEventListener("click", (event) => {
        // Check if the click is outside the formFooter
        if (!formFooter.contains(event.target)) {
          // Add fade-out animation
          addForm.classList.add("hide");
    
          // Wait for animation to complete before hiding
          setTimeout(() => {
            showAfterForm.style.display = "flex"; // Show the `showAfterForm`
            addForm.style.display = "none"; // Hide the form
            addForm.classList.remove("hide"); // Remove the hide class
            formFooter.classList.remove("formFooter-active"); // Remove the active class
          }, 500); // Match the duration of the fadeOut animation (0.5s)
        }
    });
    const addFormInput = document.querySelector("#addFormInput");
    const enterBtn = document.querySelector("#enterBtn");
    const updateButtonStyles = () => {
        if (addFormInput.value.trim() === "") {
        enterBtn.style.backgroundColor = "white";
        enterBtn.style.color = "#5C54E5";
        enterBtn.style.opacity = "0.7";
        } else {
        enterBtn.style.backgroundColor = "var(--btn)";
        enterBtn.style.border = "none";
        enterBtn.style.color = "white";
        enterBtn.style.opacity = "1";
        }
    };
    addFormInput.addEventListener("input", updateButtonStyles);
    updateButtonStyles();
  });

  // count cards section
  document.addEventListener('DOMContentLoaded', function () {
    const tasks = <%- JSON.stringify(tasks) %>;
  
    let isSortedNewestToOldestDueDate = true; // Default for due date (newest -> oldest)
    let isSortedNewestToOldestCreatedAt = true; // Default for created date (newest -> oldest)
  
    const dueDateSortIcon = document.getElementById("dueDateSortIcon");
    const createdAtSortIcon = document.getElementById("createdAtSortIcon");
    const searchInput = document.getElementById("searchInput");
  
    function formatThaiDate(date) {
      const options = { year: 'numeric', month: 'long', day: 'numeric' };
      return new Date(date).toLocaleDateString('th-TH', options);
    }
  
    const statusMapping = {
      toDo: { color: '#DFE1E6', text: 'ยังไม่ทำ' },
      inProgress: { color: '#2684FF', text: 'กำลังทำ' },
      fix: { color: '#FF7452', text: 'แก้ไข' },
      finished: { color: '#57D9A3', text: 'เสร็จสิ้น' },
    };
  
    const priorityMapping = {
      urgent: { color: '#DE350B', icon: 'fa-angles-up', text: 'ด่วน', textColor: '#DE350B' },
      normal: { color: '#FFAB00', icon: 'fa-grip-lines', text: 'ปกติ', textColor: '#FFAB00' },
      low: { color: '#4C9AFF', icon: 'fa-angle-down', text: 'ต่ำ', textColor: '#4C9AFF' },
    };
  
    function checkDueDateWarning(element, dueDate) {
      const today = new Date();
      today.setHours(0, 0, 0, 0); // Normalize today's time to midnight
      const diffInTime = new Date(dueDate) - today;
      const diffInDays = Math.floor(diffInTime / (1000 * 60 * 60 * 24));
  
      if (diffInDays < 0) {
        element.style.color = '#FF5733'; // Red for overdue tasks
      } else if (diffInDays === 0) {
        element.style.color = '#FF5733'; // Red for due today
      } else if (diffInDays > 0 && diffInDays <= 3) {
        element.style.color = '#FFA500'; // Orange for tasks due in 3 days or less
      } else {
        element.style.color = 'black'; // Black for tasks with due dates far away
      }
    }
  
    const modal = document.getElementById("tasksModal");
    const modalTitle = document.getElementById("modalTitle");
    const tasksTableBody = document.getElementById("tasksTable")?.getElementsByTagName("tbody")[0];
  
    function showModal(title, filteredTasks) {
      if (!modal || !tasksTableBody) return;
  
      modalTitle.textContent = title;
      tasksTableBody.innerHTML = '';
      filteredTasks.forEach(task => {
        const row = document.createElement('tr');
        row.onclick = function () {
          window.location.href = `/task/${task._id}/detail?spaceId=<%= spaces._id %>`;
        };
        row.classList.add('taskItem');
  
        const status = statusMapping[task.taskStatus] || {};
        const statusDiv = `<div class="statusItem" style="background-color: ${status.color || '#FFF'};">${status.text || ''}</div>`;
  
        const priority = priorityMapping[task.taskPriority] || {};
        const priorityDiv = `
            <div class="priorityItem" style="color: ${priority.textColor || '#000'};">
                <i class="fas ${priority.icon || ''}" style="color: ${priority.color || '#000'};"></i> ${priority.text || ''}
            </div>
        `;
  
        row.innerHTML = `
            <td id="taskNameModal">${highlightSearchTerm(task.taskName)}</td>
            <td id="detailModal">${task.taskDetail || '-'}</td>
            <td id="statusModal">${statusDiv}</td>
            <td id="priorityModal">${priorityDiv}</td>
            <td id="createAtModal">${formatThaiDate(new Date(task.createdAt))}</td>
            <td id="dueDateModal">
                ${task.dueDate ? formatThaiDate(new Date(task.dueDate)) : '-'}
            </td>
            <td id="profileModal">
                ${task.assignedUsers
                  .map(
                    user => `<img src="${user.profileImage || '/public/img/profileImage/userDefalt.jpg'}" class="proImg" title="${user.username}">`
                  )
                  .join('')}
            </td>
        `;
        const dueDateElement = row.querySelector('#dueDateModal');
        if (task.dueDate) {
          checkDueDateWarning(dueDateElement, task.dueDate);
        }
  
        tasksTableBody.appendChild(row);
      });
      modal.style.display = "flex";
    }
  
    // Sorting tasks by due date
    function sortTasksByDueDate(tasks, isNewestToOldest) {
      return tasks.sort((a, b) => {
        const dueDateA = new Date(a.dueDate);
        const dueDateB = new Date(b.dueDate);
  
        if (isNaN(dueDateA)) return 1;
        if (isNaN(dueDateB)) return -1;
  
        return isNewestToOldest ? dueDateB - dueDateA : dueDateA - dueDateB;
      });
    }
  
    // Sorting tasks by created date
    function sortTasksByCreatedAt(tasks, isNewestToOldest) {
      return tasks.sort((a, b) => {
        const createdAtA = new Date(a.createdAt);
        const createdAtB = new Date(b.createdAt);
  
        return isNewestToOldest ? createdAtB - createdAtA : createdAtA - createdAtB;
      });
    }
  
    // Function to filter tasks by search term
    function filterTasksBySearch(searchTerm) {
      const filteredTasks = tasks.filter(task => task.taskName.toLowerCase().includes(searchTerm.toLowerCase()));
      showModal('ค้นหางาน...', filteredTasks); // Show filtered tasks
    }
  
    // Function to highlight search term in task name
    function highlightSearchTerm(taskName) {
      const searchTerm = searchInput?.value.trim();
      if (!searchTerm) return taskName; // Return original task name if no search term
  
      const regex = new RegExp(`(${searchTerm})`, 'gi'); // Case insensitive search
      return taskName.replace(regex, '<span class="highlight">$1</span>'); // Wrap the matched term with a span
    }
  
    // Event listeners
    if (searchInput) {
      searchInput.addEventListener("input", function () {
        const searchTerm = searchInput.value.trim();
        filterTasksBySearch(searchTerm);
      });
    }
  
    if (dueDateSortIcon) {
      dueDateSortIcon.addEventListener("click", function () {
        isSortedNewestToOldestDueDate = !isSortedNewestToOldestDueDate;
        const sortedTasks = sortTasksByDueDate(tasks, isSortedNewestToOldestDueDate);
        showModal("งานทั้งหมด", sortedTasks);
      });
    }
  
    if (createdAtSortIcon) {
      createdAtSortIcon.addEventListener("click", function () {
        isSortedNewestToOldestCreatedAt = !isSortedNewestToOldestCreatedAt;
        const sortedTasks = sortTasksByCreatedAt(tasks, isSortedNewestToOldestCreatedAt);
        showModal("งานทั้งหมด", sortedTasks);
      });
    }
  
    const finishedTasksCard = document.getElementById("finishedTasksCard");
    if (finishedTasksCard) {
      finishedTasksCard.onclick = function () {
        const filteredTasks = tasks.filter(task => task.taskStatus === 'finished');
        showModal('งานที่เสร็จสิ้น', filteredTasks);
      };
    }
  
    const updatedTasksCard = document.getElementById("updatedTasksCard");
    if (updatedTasksCard) {
      updatedTasksCard.onclick = function () {
        const filteredTasks = tasks.filter(task => new Date(task.updatedAt) > new Date(task.createdAt));
        showModal('Updated Tasks', filteredTasks);
      };
    }

    const recentTasksCard = document.getElementById("recentTasksCard");
    if (recentTasksCard) {
      recentTasksCard.onclick = function () {
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        const period = '<%- selectedPeriod %>';
        let startDate;

        switch (period) {
          case 'today':
            startDate = today; // Only tasks created today
            break;
          case '7day':
            startDate = new Date();
            startDate.setDate(today.getDate() - 7); // Tasks from last 7 days
            break;
          case '1month':
            startDate = new Date();
            startDate.setMonth(today.getMonth() - 1); // Tasks from last month
            break;
          case 'sinceCreate':
            startDate = new Date(0); // Tasks since the beginning
            break;
          default:
            startDate = new Date();
            startDate.setDate(today.getDate() - 7); // Default to last 7 days
        }

        // Filter tasks created within the selected period
        const filteredTasks = tasks.filter(task => new Date(task.createdAt) >= startDate);
        showModal('งานที่สร้างขึ้นในช่วงเวลา', filteredTasks);
      };
    }

    const dueNextSevenDaysCard = document.getElementById("dueNextSevenDaysCard");
    if (dueNextSevenDaysCard) {
      dueNextSevenDaysCard.onclick = function () {
        const today = new Date();
        const nextSevenDays = new Date();
        nextSevenDays.setDate(today.getDate() + 7);
        const filteredTasks = tasks.filter(task => task.dueDate && new Date(task.dueDate) >= today && new Date(task.dueDate) <= nextSevenDays);
        showModal('Tasks Due in Next 7 Days', filteredTasks);
      };
    }

    const span = document.getElementsByClassName("close")[0];
    if (span) {
      span.onclick = function () {
        modal.style.display = "none";
      };
    }
  
    window.onclick = function (event) {
      if (event.target === modal) {
        modal.style.display = "none";
      }
    };
  });
  
  // subtask section
  document.addEventListener('DOMContentLoaded', function() {
    const tasks = <%- JSON.stringify(tasks) %>;

    const modal = document.getElementById("subTasksModal");
    const span = document.getElementsByClassName("close")[0];
    const modalTitle = document.getElementById("modalTitle");
    const subtasksTableBody = document.getElementById("subtasksTable").getElementsByTagName("tbody")[0];

    function showSubtasksModal(title, filteredTasks) {
        modalTitle.textContent = title;
        subtasksTableBody.innerHTML = ''; // Clear previous content

        filteredTasks.forEach(task => {
            // Ensure 'subtasks' exists and is an array
            if (task.subtasks && Array.isArray(task.subtasks)) {
                task.subtasks.forEach(subtask => {
                    const row = subtasksTableBody.insertRow(); // Create a new row
                    row.style.cursor = 'pointer';

                    // Insert cells into the row
                    row.insertCell(0).textContent = subtask.subtask_Name || ''; 
                    row.insertCell(1).textContent = task.taskName || ''; 
                    row.insertCell(2).textContent = subtask.subTask_status || ''; // Subtask status
                    row.insertCell(3).textContent = subtask.subTask_dueDate ? new Date(subtask.subTask_dueDate).toLocaleDateString() : ''; // Due date

                    const assignedUsersCell = row.insertCell(4); 

                    // Check if 'assignedUsers' exists and is an array
                    if (subtask.assignee && subtask.assignee.profileImage && subtask.assignee.username) {
                      const img = document.createElement('img');
                      img.src = subtask.assignee.profileImage || ''; // Use assignee's profile image
                      img.alt = subtask.assignee.username || ''; // Use assignee's username
                      img.style.width = '30px';
                      img.style.height = '30px';
                      img.style.borderRadius = '50%';
                      img.style.marginRight = '5px';
                      assignedUsersCell.appendChild(img);
                    } else {
                        assignedUsersCell.textContent = 'No assignee'; // Fallback if no assignee
                    }
                });
            }
        });

        modal.style.display = "block"; // Show the modal
    }

    document.getElementById("subTasksCard").onclick = function() {
        const filteredTasks = tasks.filter(task => task.subtasks && task.subtasks.length > 0);
        showSubtasksModal('Subtask Details', filteredTasks);
    };

    span.onclick = function() {
        modal.style.display = "none";
    };

    window.onclick = function(event) {
        if (event.target == modal) {
            modal.style.display = "none";
        }
    };
});

  // Status chart section
  document.addEventListener('DOMContentLoaded', function () {
    const tasks = <%- JSON.stringify(tasks) %>;
    const statusCounts = <%- JSON.stringify(statusCounts) %>;
    const startDate = new Date("<%= startDate.toISOString() %>");

    function formatThaiDate(date) {
      const options = { year: 'numeric', month: 'long', day: 'numeric' };
      return new Date(date).toLocaleDateString('th-TH', options);
    }

    const statusMapping = {
      toDo: { color: '#DFE1E6', text: 'ยังไม่ทำ' },
      inProgress: { color: '#2684FF', text: 'กำลังทำ' },
      fix: { color: '#FF7452', text: 'แก้ไข' },
      finished: { color: '#57D9A3', text: 'เสร็จสิ้น' },
    };

    const priorityMapping = {
      urgent: { color: '#DE350B', icon: 'fa-angles-up', text: 'ด่วน', textColor: '#DE350B' },
      normal: { color: '#FFAB00', icon: 'fa-grip-lines', text: 'ปกติ', textColor: '#FFAB00' },
      low: { color: '#4C9AFF', icon: 'fa-angle-down', text: 'ต่ำ', textColor: '#4C9AFF' },
    };

    function checkDueDateWarning(element, dueDate) {
      const today = new Date();
      today.setHours(0, 0, 0, 0); // Normalize today's time to midnight
      const diffInTime = new Date(dueDate) - today;
      const diffInDays = Math.floor(diffInTime / (1000 * 60 * 60 * 24));

      if (diffInDays < 0) {
        element.style.color = '#FF5733'; // Red for overdue tasks
      } else if (diffInDays === 0) {
        element.style.color = '#FF5733'; // Red for due today
      } else if (diffInDays > 0 && diffInDays <= 3) {
        element.style.color = '#FFA500'; // Orange for tasks due in 3 days or less
      } else {
        element.style.color = 'black'; // Black for tasks with due dates far away
      }
    }

    // Calculate total tasks
    const totalTasks =
      (statusCounts.toDo || 0) +
      (statusCounts.inProgress || 0) +
      (statusCounts.fix || 0) +
      (statusCounts.finished || 0);

    // Calculate percentage of 'finished' status
    const finishedPercentage = <%= finishedPercentage %>;

    // Prepare data for the chart
    let statusData;
    if (totalTasks === 0) {
      statusData = {
        labels: ['ไม่มีงาน'],
        datasets: [
          {
            label: 'Task Status Distribution',
            data: [1],
            backgroundColor: ['#D3D3D3'], 
            hoverBackgroundColor: ['#C7C8CC'],
          },
        ],
      };
    } else {
      statusData = {
        labels: ['ยังไม่ทำ', 'กำลังทำ', 'แก้ไข', 'เสร็จสิ้น'],
        datasets: [
          {
            label: 'การกระจายสถานะงาน',
            data: [
              statusCounts.toDo || 0,
              statusCounts.inProgress || 0,
              statusCounts.fix || 0,
              statusCounts.finished || 0,
            ],
            backgroundColor: ['#DFE1E6', '#2684FF', '#FF7452', '#57D9A3'],
            hoverBackgroundColor: ['#E3E4E8', '#74A5FF', '#FC9F85', '#9CE6C0'],
          },
        ],
      };
    }

    const ctxStatus = document.getElementById('statusChart').getContext('2d');

    const statusChart = new Chart(ctxStatus, {
      type: 'doughnut',
      data: statusData,
      options: {
        responsive: true,
        plugins: {
          legend: {
            position: 'right',
            labels: {
              generateLabels: function (chart) {
                const data = chart.data;
                const meta = chart.getDatasetMeta(0);
                return data.labels.map((label, i) => {
                  const count = data.datasets[0].data[i] || 0;
                  const hidden = meta.data[i]?.hidden || false;
                  return {
                    text: `${label}: ${count}`,
                    fillStyle: data.datasets[0].backgroundColor[i],
                    hidden: hidden,
                    index: i,
                    font: {
                      family: 'Kanit', // Use 'Kanit' font
                    },
                  };
                });
              },
              usePointStyle: false,
              boxWidth: 20, // Square box
              boxHeight: 20,
              padding: 15,
            },
            onClick: function (e, legendItem, legend) {
              const chart = legend.chart;
              const index = legendItem.index;
              const meta = chart.getDatasetMeta(0);
    
              meta.data[index].hidden = !meta.data[index].hidden;
              chart.update();
    
              const labelElement = e.native.target.closest('.chartjs-legend-item');
              if (labelElement) {
                labelElement.style.opacity = meta.data[index].hidden ? '0.5' : '1';
              }
            },
            onLayoutUpdate: function (chart) {
              // Align labels in a 2x2 grid
              const container = chart.canvas.parentNode.querySelector('.chartjs-legend');
              if (container) {
                container.style.display = 'grid';
                container.style.gridTemplateColumns = 'repeat(2, auto)';
                container.style.justifyContent = 'center';
                container.style.gap = '10px'; // Adjust gap between rows/columns
              }
            },
          },
          tooltip: {
            enabled: false, // Disable default tooltips
          },
        },
      },
    });
    

    // Set default hover text to 'finished' status percentage
    const statusPer = document.getElementById('statusPer');
    const statusLabel = document.getElementById('statusLabel');
    statusPer.textContent = `${finishedPercentage}%`;
    statusLabel.textContent = 'เสร็จสิ้น';

    // Add event listener for mousemove on the canvas
    const canvas = document.getElementById('statusChart');
    canvas.addEventListener('mousemove', function (event) {
      const elements = statusChart.getElementsAtEventForMode(
        event,
        'nearest', // Nearest chart item
        { intersect: true }, // Require cursor intersection
        false
      );
    
      if (elements.length) {
        const index = elements[0].index;
        const count = statusChart.data.datasets[0].data[index];
        const percentage = totalTasks > 0 ? Math.round((count / totalTasks) * 100) : 0;
        const label = statusChart.data.labels[index];
        const colors = ['#44546F', '#0065ff', '#ff7452', '#36b37e']; // Colors for each status
    
        // Update hover text content
        statusPer.textContent = `${percentage}%`;
        statusLabel.textContent = label;
    
        // Change percentage color and weight
        statusPer.style.color = colors[index];
        statusPer.style.fontWeight = '500';
        statusPer.style.fontSize = '22px';
      } else {
        statusPer.textContent = `${finishedPercentage}%`;
        statusLabel.textContent = 'เสร็จสิ้น';
        statusLabel.style.fontSize = '16px';
        statusPer.style.fontWeight = '300';
    
        // Reset percentage color and weight
        statusPer.style.color = '#57D9A3'; 
        statusPer.style.fontWeight = 'normal';
      }
    });

    // Add event listener for click on the canvas
    canvas.addEventListener('click', function (event) {
      const elements = statusChart.getElementsAtEventForMode(
        event,
        'nearest', // Nearest chart item
        { intersect: true }, // Require cursor intersection
        false
      );

      if (elements.length) {
        const index = elements[0].index;
        const statusMap = {
          'ยังไม่ทำ': 'toDo',
          'กำลังทำ': 'inProgress',
          'แก้ไข': 'fix',
          'เสร็จสิ้น': 'finished',
        };
        const status = statusMap[statusChart.data.labels[index]];
    
        // Filter tasks by status and within the selected date range
        const filteredTasks = tasks.filter((task) => {
          const createdAt = new Date(task.createdAt);
          return (
            task.taskStatus === status &&
            createdAt >= startDate // `startDate` is determined in the backend
          );
        });
    
        // Show modal with filtered tasks
        showModal(`งานที่${statusChart.data.labels[index]}`, filteredTasks);
      }
    });

    const modal = document.getElementById("tasksModal");
    const modalTitle = document.getElementById("modalTitle");
    const tasksTableBody = document.getElementById("tasksTable").getElementsByTagName("tbody")[0];
    const searchInput = document.getElementById("searchInput");

    function showModal(title, filteredTasks) {
      modalTitle.textContent = title;
      tasksTableBody.innerHTML = '';
      filteredTasks.forEach(task => {
        const row = document.createElement('tr');
        row.onclick = function () {
          window.location.href = `/task/${task._id}/detail?spaceId=<%= spaces._id %>`;
        };
        row.classList.add('taskItem');

        const status = statusMapping[task.taskStatus] || {};
        const statusDiv = `<div class="statusItem" style="background-color: ${status.color || '#FFF'};">${status.text || ''}</div>`;

        const priority = priorityMapping[task.taskPriority] || {};
        const priorityDiv = `
              <div class="priorityItem" style="color: ${priority.textColor || '#000'};">
                  <i class="fas ${priority.icon || ''}" style="color: ${priority.color || '#000'};"></i> ${priority.text || ''}
              </div>
          `;

        row.innerHTML = `
                <td id="taskNameModal">${highlightSearchTerm(task.taskName)}</td>
                <td id="detailModal">${task.taskDetail || '-'}</td>
                <td id="statusModal">${statusDiv}</td>
                <td id="priorityModal">${priorityDiv}</td>
                <td id="createAtModal">${formatThaiDate(new Date(task.createdAt))}</td>
                <td id="dueDateModal">
                    ${task.dueDate ? formatThaiDate(new Date(task.dueDate)) : '-'}
                </td>
                <td id="profileModal">
                    ${task.assignedUsers
                        .map(
                            user => `<img src="${user.profileImage || '/public/img/profileImage/userDefalt.jpg'}" class="proImg" title="${user.username}">`
                        )
                        .join('')}
                </td>
            `;
        const dueDateElement = row.querySelector('#dueDateModal');
        if (task.dueDate) {
          checkDueDateWarning(dueDateElement, task.dueDate);
        }

        tasksTableBody.appendChild(row);
      });
      modal.style.display = "flex";
    }
    
    // Function to filter tasks by search term
    function filterTasksBySearch(searchTerm) {
      const filteredTasks = tasks.filter(task => task.taskName.toLowerCase().includes(searchTerm.toLowerCase()));
      showModal('ค้นหางาน...', filteredTasks); // Show filtered tasks
    }

    // Event listener for search input
    searchInput.addEventListener("input", function () {
      const searchTerm = searchInput.value.trim();
      filterTasksBySearch(searchTerm); // Filter and update tasks based on search
    });

    // Function to highlight search term in task name
    function highlightSearchTerm(taskName) {
      const searchTerm = searchInput.value.trim();
      if (!searchTerm) return taskName; // Return original task name if no search term

      const regex = new RegExp(`(${searchTerm})`, 'gi'); // Case insensitive search
      return taskName.replace(regex, '<span class="highlight">$1</span>'); // Wrap the matched term with a span
    }

    // Close modal
    const span = document.getElementsByClassName('close')[0];
    span.onclick = function () {
      const modal = document.getElementById('tasksModal');
      modal.style.display = 'none';
    };

    window.onclick = function (event) {
      const modal = document.getElementById('tasksModal');
      if (event.target == modal) {
        modal.style.display = 'none';
      }
    };
  });

  // Priority chart section
  document.addEventListener('DOMContentLoaded', function () {
    const tasks = <%- JSON.stringify(tasks) %>;
    const priorityCounts = <%- JSON.stringify(priorityCounts) %>;
    const startDate = new Date("<%= startDate.toISOString() %>");

    function formatThaiDate(date) {
      const options = { year: 'numeric', month: 'long', day: 'numeric' };
      return new Date(date).toLocaleDateString('th-TH', options);
    }

    const statusMapping = {
      toDo: { color: '#DFE1E6', text: 'ยังไม่ทำ' },
      inProgress: { color: '#2684FF', text: 'กำลังทำ' },
      fix: { color: '#FF7452', text: 'แก้ไข' },
      finished: { color: '#57D9A3', text: 'เสร็จสิ้น' },
    };

    const priorityMapping = {
      urgent: { color: '#DE350B', icon: 'fa-angles-up', text: 'ด่วน', textColor: '#DE350B' },
      normal: { color: '#FFAB00', icon: 'fa-grip-lines', text: 'ปกติ', textColor: '#FFAB00' },
      low: { color: '#4C9AFF', icon: 'fa-angle-down', text: 'ต่ำ', textColor: '#4C9AFF' },
    };

    function checkDueDateWarning(element, dueDate) {
      const today = new Date();
      today.setHours(0, 0, 0, 0); // Normalize today's time to midnight
      const diffInTime = new Date(dueDate) - today;
      const diffInDays = Math.floor(diffInTime / (1000 * 60 * 60 * 24));

      if (diffInDays < 0) {
        element.style.color = '#FF5733'; // Red for overdue tasks
      } else if (diffInDays === 0) {
        element.style.color = '#FF5733'; // Red for due today
      } else if (diffInDays > 0 && diffInDays <= 3) {
        element.style.color = '#FFA500'; // Orange for tasks due in 3 days or less
      } else {
        element.style.color = 'black'; // Black for tasks with due dates far away
      }
    }

    // Priority data for the chart
    const priorityData = {
      labels: ['ด่วน', 'ปกติ', 'ต่ำ'],
      datasets: [
        {
          label: 'การแบ่งลำดับความสำคัญ',
          data: [
            priorityCounts.urgent || 0,
            priorityCounts.normal || 0,
            priorityCounts.low || 0,
          ],
          backgroundColor: ['#DE350B', '#FFAB00', '#4C9AFF'],
          hoverBackgroundColor: ['#F88F75', '#FFCD67', '#79B3FF'],
          barThickness: 50, 
        },
      ],
    };

    const ctxPriority = document.getElementById('priorityChart').getContext('2d');

    // Custom plugin to draw icons
    const iconPlugin = {
      id: 'iconPlugin',
      afterDraw(chart) {
        const { ctx, chartArea, scales } = chart;
        const { bottom } = chartArea;
        const xAxis = scales.x;
        const iconMapping = {
          ด่วน: '\uf102', // Font Awesome unicode for "fa-angles-up"
          ปกติ: '\uf07d', // Font Awesome unicode for "fa-grip-lines"
          ต่ำ: '\uf103', // Font Awesome unicode for "fa-angle-down"
        };

        ctx.save();
        ctx.textAlign = 'left';
        ctx.textBaseline = 'middle';
        ctx.font = '16px FontAwesome';

        xAxis.ticks.forEach((_, i) => {
          const x = xAxis.getPixelForTick(i);
          const y = bottom + 18;
          const iconX = x - 30;
          const label = priorityData.labels[i];
          ctx.fillStyle = priorityData.datasets[0].backgroundColor[i];
          ctx.fillText(iconMapping[label], iconX, y);
        });

        ctx.restore();
      },
    };

    // Create the priority chart
    const priorityChart = new Chart(ctxPriority, {
      type: 'bar',
      data: priorityData,
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          x: {
            grid: {
              display: false,
              barPercentage: 0,
            },
          },
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'จำนวนงาน',
            },
            ticks: {
              callback: function(value) {
                return Number.isInteger(value) ? value : null;
              },
              stepSize: 1,
            },
          },
        },
        plugins: {
          legend: {
            display: false,
          },
          tooltip: {
            enabled: false,
          },
        },
      },
      plugins: [iconPlugin],
    });

    // Add event listener for click on the canvas
    const canvas = document.getElementById('priorityChart');
    canvas.addEventListener('click', function (event) {
      const elements = priorityChart.getElementsAtEventForMode(
        event,
        'nearest', // Nearest chart item
        { intersect: true }, // Require cursor intersection
        false
      );

      if (elements.length) {
        const index = elements[0].index;
        const priorityMap = {
          0: 'urgent',
          1: 'normal',
          2: 'low',
        };
        const priority = priorityMap[index];
        const filteredTasks = tasks.filter(task => task.taskPriority === priority);
        showModal(`งานที่ ${priorityData.labels[index]} Tasks`, filteredTasks);
      }
    });

    const modal = document.getElementById("tasksModal");
    const modalTitle = document.getElementById("modalTitle");
    const tasksTableBody = document.getElementById("tasksTable").getElementsByTagName("tbody")[0];
    const searchInput = document.getElementById("searchInput");

    function showModal(title, filteredTasks) {
      modalTitle.textContent = title;
      tasksTableBody.innerHTML = '';
      filteredTasks.forEach(task => {
        const row = document.createElement('tr');
        row.onclick = function () {
          window.location.href = `/task/${task._id}/detail?spaceId=<%= spaces._id %>`;
        };
        row.classList.add('taskItem');

        const status = statusMapping[task.taskStatus] || {};
        const statusDiv = `<div class="statusItem" style="background-color: ${status.color || '#FFF'};">${status.text || ''}</div>`;

        const priority = priorityMapping[task.taskPriority] || {};
        const priorityDiv = `
              <div class="priorityItem" style="color: ${priority.textColor || '#000'};">
                  <i class="fas ${priority.icon || ''}" style="color: ${priority.color || '#000'};"></i> ${priority.text || ''}
              </div>
          `;

        row.innerHTML = `
                <td id="taskNameModal">${highlightSearchTerm(task.taskName)}</td>
                <td id="detailModal">${task.taskDetail || '-'}</td>
                <td id="statusModal">${statusDiv}</td>
                <td id="priorityModal">${priorityDiv}</td>
                <td id="createAtModal">${formatThaiDate(new Date(task.createdAt))}</td>
                <td id="dueDateModal">
                    ${task.dueDate ? formatThaiDate(new Date(task.dueDate)) : '-'}
                </td>
                <td id="profileModal">
                    ${task.assignedUsers
            .map(
              user => `<img src="${user.profileImage || '/public/img/profileImage/userDefalt.jpg'}" class="proImg" title="${user.username}">`
            )
            .join('')}
                </td>
            `;
        const dueDateElement = row.querySelector('#dueDateModal');
        if (task.dueDate) {
          checkDueDateWarning(dueDateElement, task.dueDate);
        }

        tasksTableBody.appendChild(row);
      });
      modal.style.display = "flex";
    }

    // Function to filter tasks by search term
    function filterTasksBySearch(searchTerm) {
      const filteredTasks = tasks.filter(task => task.taskName.toLowerCase().includes(searchTerm.toLowerCase()));
      showModal('ค้นหางาน...', filteredTasks); // Show filtered tasks
    }

    // Event listener for search input
    searchInput.addEventListener("input", function () {
      const searchTerm = searchInput.value.trim();
      filterTasksBySearch(searchTerm); // Filter and update tasks based on search
    });

    // Function to highlight search term in task name
    function highlightSearchTerm(taskName) {
      const searchTerm = searchInput.value.trim();
      if (!searchTerm) return taskName; // Return original task name if no search term

      const regex = new RegExp(`(${searchTerm})`, 'gi'); // Case insensitive search
      return taskName.replace(regex, '<span class="highlight">$1</span>'); // Wrap the matched term with a span
    }
    // Close modal
    const span = document.getElementsByClassName("close")[0];
    span.onclick = function() {
      const modal = document.getElementById("tasksModal");
      modal.style.display = "none";
    };

    window.onclick = function(event) {
      const modal = document.getElementById("tasksModal");
      if (event.target == modal) {
        modal.style.display = "none";
      }
    };
  });

  // Workload chart section
  document.addEventListener('DOMContentLoaded', function () {
    const tasks = <%- JSON.stringify(tasks) %>;

    // Add event listener for click on workload table rows
    document.querySelectorAll('.workload-row').forEach(row => {
      row.addEventListener('click', function () {
        const userId = this.getAttribute('data-user-id');
        const filteredTasks = tasks.filter(task =>
          task.assignedUsers.some(user => user._id === userId)
        );
        const userName = this.querySelector('.user-name').textContent;

        // Show the modal and populate it with the tasks
        showModal(`Tasks Assigned to ${userName}`, filteredTasks);
      });
    });

    // Function to populate the modal and display it
    function showModal(title, filteredTasks) {
      const modal = document.getElementById('tasksModal');
      const modalTitle = document.getElementById('modalTitle');
      const tasksTableBody = document.querySelector('#tasksTable tbody');

      // Set modal title
      modalTitle.textContent = title;

      // Clear existing tasks in the modal
      tasksTableBody.innerHTML = '';

      // Populate tasks in the modal
      filteredTasks.forEach(task => {
        const row = document.createElement('tr');
        row.onclick = function () {
          window.location.href = `/task/${task._id}/detail?spaceId=<%= spaces._id %>`;
        };
        row.classList.add('taskItem');

        const status = statusMapping[task.taskStatus] || {};
        const statusDiv = `<div class="statusItem" style="background-color: ${status.color || '#FFF'};">${status.text || ''}</div>`;

        const priority = priorityMapping[task.taskPriority] || {};
        const priorityDiv = `
              <div class="priorityItem" style="color: ${priority.textColor || '#000'};">
                  <i class="fas ${priority.icon || ''}" style="color: ${priority.color || '#000'};"></i> ${priority.text || ''}
              </div>
          `;

        row.innerHTML = `
                <td id="taskNameModal">${highlightSearchTerm(task.taskName)}</td>
                <td id="detailModal">${task.taskDetail || '-'}</td>
                <td id="statusModal">${statusDiv}</td>
                <td id="priorityModal">${priorityDiv}</td>
                <td id="createAtModal">${formatThaiDate(new Date(task.createdAt))}</td>
                <td id="dueDateModal">
                    ${task.dueDate ? formatThaiDate(new Date(task.dueDate)) : '-'}
                </td>
                <td id="profileModal">
                    ${task.assignedUsers
            .map(
              user => `<img src="${user.profileImage || '/public/img/profileImage/userDefalt.jpg'}" class="proImg" title="${user.username}">`
            )
            .join('')}
                </td>
            `;
        const dueDateElement = row.querySelector('#dueDateModal');
        if (task.dueDate) {
          checkDueDateWarning(dueDateElement, task.dueDate);
        }

        tasksTableBody.appendChild(row);
      });

      // Display the modal
      modal.style.display = 'flex';
    }

    // Close modal when clicking the close button
    document.querySelector('#tasksModal .close').addEventListener('click', function () {
      document.getElementById('tasksModal').style.display = 'none';
    });

    // Optional: Close modal when clicking outside the modal content
    window.addEventListener('click', function (event) {
      const modal = document.getElementById('tasksModal');
      if (event.target === modal) {
        modal.style.display = 'none';
      }
    });
  });
</script>